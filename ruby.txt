-----------------------------------------------------
ONLY USE DOUBLE QUOTES
-----------------------------------------------------

'you don't want to do that' (don't use single quotes!!)
"you don't want to do that"
"this" + " " + "that"

-----------------------------------------------------
STRING_INTERPOLATION
-----------------------------------------------------
name = "Tyson"

"Hello, " + name + ". How are you?"
(better way of writing it out)
"Hello, #{name}. How are you?" :) nice and clean!!
"String_Interpolation"

Inside of the {} we can put anything we want!

'Hello, #{name}. How old are you?'
returens - "Hello, \#{name}. How are you?"
(Single quoted strings do not work with Sting_Interpolation)

"1 + 1 = #{1 + 1}"
returens = 1 + 1 = 2

-----------------------------------------------------
NEW LINE CHARACTER
-----------------------------------------------------

"Hello\nTyson" (Works)
returens - Hello
Tyson
'Hello\nTyson' (Doesn't work)
returens - error

-----------------------------------------------------
ARRAYS
-----------------------------------------------------
[ ] = empty Array!!

Iteration - (Going one by one over the collection)
---------
["Tyson", "Will", "Ty", "Jason", "Jeremy", "Nhi"]
    0        1      2      3         4       5

Assign to a variable
^^                 ^^
storage = ["Tyson", "Will", "Ty", "Jason", "Jeremy", "Nhi"]

puts storage[0]
returens- "Tyson"

Indexes - a container inside of an array
-------

Method Chaining - name.reverse.capitalize.upcase.downcase
---------------

Array Methods
-------------

people.each-

storage.count -
returens the total Indexes are in the array!

storage << "Soldier"
<< shovel operator-- Adds shit into the array! aka "Soldier"

storage.size
storage.length
storage.count
returens - The total Indexes inside of the array.

people = ["Tyson", "Will", "Ty", "Jason", "Jeremy", "Nhi"]

people.each do |person|
    puts person
end

returens =
Tyson
Will
Ty
Jason
Jeremy
Nhi

things = [1, 2, 3]

things.each do |number|
    puts number * number
end

1
4
9

things = ["Jeremy", 1, 5.3, ["Ty", 4, -0.4],[]]
an array inside of an array is called Multi Dimensional Array

combination:

a = [1, 2, 3, 4]
a.combination(1).to_a  #=> [[1],[2],[3],[4]]
a.combination(2).to_a  #=> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
a.combination(3).to_a  #=> [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]
a.combination(4).to_a  #=> [[1,2,3,4]]
a.combination(0).to_a  #=> [[]] # one combination of length 0
a.combination(5).to_a  #=> []   # no combinations of length 5

-----------------------------------------------------
VARIABLES
-----------------------------------------------------

local_variable = "hello"

@instance_variable = "Jeremy"

@@class_variable = "Human"

$global_variable = "DO NOT USE!"

!Scopping!

-----------------------------------------------------
HASH
-----------------------------------------------------
{} - empty hash

storage = {"Box 1" => "Staff", "Box 2" => "More stuff"}

puts storage["Box 1"]

***A hash is a set of key valued pairs***

The keys inside of the hash cannot be identical.

storage = {"Box 1" => "Staff", "Box 2" => "More stuff",
"Will" => ["box", "of", "stuff"]}

hsh - {"a" => 1, "b" => 2. "a" => 3}
returens 3

the first key "a" is ignored because their is an identical key "a" at the end of the hash.

storage = {"Jeremy" => "Stuff", "Ty" => "More stuff", "Will" => ["box", "of", "stuff"]}

storage.each_pair do ||
  puts "The key is #{key} and the value is #{stuff}"
end

returens:

The key is Jeremy and the value is Stuff
The key is Ty and the value is More stuff
The key is Will and the value is ["box", "of", "stuff"]

has_value?

h = { "a" => 100, "b" => 200 }
h.has_value?(100)  #=> true
h.has_value?(999)  #=> false

member?
include?

h = { "a" => 100, "b" => 200 }
h.has_key?("a")  #=> true
h.has_key?("b")  #=> false

-----------------------------------------------------
apidock.com/ruby
-----------------------------------------------------

-----------------------------------------------------
SYMBOL
-----------------------------------------------------

:name = Symbol

more commonly used in Hashes {}
example:
me = {:name => "Jeremy", :age => 32, :height => "tall", :wight => "fat at heart"}

puts me [:name]
returens = "Jeremy"

me[:sex] = "yes, please"
returens = me = {:name => "Jeremy", :age => 32, :height => "tall", :wight => "fat at heart, :sex => "yes,please"}

me[:sex] = "male"
returens = me = {:name => "Jeremy", :age => 32, :height => "tall", :wight => "fat at heart", :sex => "male"}

{'food' => 'taco'}
{:food => 'taco'} "less code"
{food: 'taco'} "booya baby!"

{'data-url' => 'http://www.google.com'}
{:data-url => 'http://www.google.com'} "NOT VALID"
{:data_url => 'http://www.google.com'} "booya baby!"

-----------------------------------------------------
TIME
-----------------------------------------------------

Time.now
returens = 2014-05-22 11:56:27 -0600
            Date      Time   Time zone


Time.now.year
Time.now.month
Time.now.day
Time.now.hour
Time.now.min
Time.now.sec

current_year = Time.now.year
returen - 2014
current_year = Time.now.year - 24
returens - 1989

-----------------------------------------------------
WHILE LOOP
-----------------------------------------------------

$i = 0
$num = 5

while $i < $num  do
   puts("Inside the loop i = #$i" )
   $i +=1
end

returens:

Inside the loop i = 0
Inside the loop i = 1
Inside the loop i = 2
Inside the loop i = 3
Inside the loop i = 4

----------------------------------
DATA TYPES
----------------------------------
-Numbers

-Booleans (which can be true or false)

-Strings  (words or phrases like "I'm learning Ruby!")

-Prints (command just takes whatever you give it and prints it to the screen.)

-Puts (is slightly different: it adds a new (blank) line after the thing you want it to print.)
